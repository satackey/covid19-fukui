name: 福井県のデータをGitHubへPush

on:
  repository_dispatch:
  # スケジュール実行の例。 以下は昼の12:30JSTに実行する例
  # schedule:
  #   - cron: 30 12 * * *

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      - name: 共通のデータを出力
        id: metadatas
        uses: actions/github-script@0.9.0
        with:
          secondary-base-branch: ${{ secrets.SECONDARY_BASE_BRANCH }}
          secondary-alt-base-branches: ${{ secrets.SECONDARY_ALT_BASE_BRANCHES }}
          script: |
            console.log(context)

            const defaultBaseBranch = context.payload.repository.default_branch.replace('refs/heads/', '')

            const clientPayloadHasBaseBranch = context.payload.client_payload != null && typeof context.payload.client_payload.base_branch === 'string' && context.payload.client_payload.base_branch.length > 1
            const inputHasBaseBranch = core.getInput('secondary-base-branch') !== ''

            let baseBranch = ''
            let altBaseBranches = []
            if (clientPayloadHasBaseBranch) {
              baseBranch = context.payload.client_payload.base_branch

              if (Array.isArray(context.payload.client_payload.alt_base_braches)) {
                altBaseBranches.push(...context.payload.client_payload.alt_base_braches.filter(branch => branch !== ''))
              }
            } else if (inputHasBaseBranch) {
              baseBranch = core.getInput('secondary-base-branch')
              altBaseBranches = core.getInput('secondary-alt-base-branches').split(' ').filter(branch => branch !== '')
            } else {
              baseBranch = defaultBaseBranch
            }

            const headBranch = `update_data/updatejson_for/${baseBranch}`

            core.setOutput('head-branch', headBranch)
            core.setOutput('base-branch', baseBranch)
            core.setOutput('alt-base-branches', JSON.stringify(altBaseBranches))
            core.setOutput('current-date', (new Date).toString())

            // 重複するPRを取得
            const duplicatePullNumbers = (await github.pulls.list({
              owner: context.payload.repository.owner.login,
              repo: context.payload.repository.name,
              head: headBranch,
              status: 'open',
            })).data.map(pull => pull.number)
            core.setOutput('duplicate-pulls', JSON.stringify(duplicatePullNumbers))

      - name: Gitを設定
        run: |
          git config --global user.name github-actions
          git config --global user.email actions@github.com

      - name: リポジトリをチェックアウト
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.metadatas.outputs.base-branch }}

      - name: Dockerイメージをビルド
        env:
          CSV_FETCH_ENV: ${{ secrets.CSV_FETCH_ENV }}
        run: |
          echo "$CSV_FETCH_ENV" > covid19_fukui/.env.local
          docker-compose build fetch_fukui_data

      - name: data/*.jsonを作成
        run: docker-compose run fetch_fukui_data

      - name: ブランチを作成
        id: branch
        env:
          TZ: JST-9
          BRANCH_NAME: ${{ steps.metadatas.outputs.head-branch }}
        run: |
          git switch -c $BRANCH_NAME
          git push -f -u origin $BRANCH_NAME

      - name: コミット
        run: |
          git add .
          git commit -m "[Auto] データを更新 ${{ steps.metadatas.outputs.current-date }}"

      - name: プッシュ
        run: git push

      - name: Pull request を作成
        uses: actions/github-script@0.9.0
        with:
          duplicate-pulls: ${{ steps.metadatas.outputs.duplicate-pulls }}
          alt-base-branches: ${{ steps.metadatas.outputs.alt-base-branches }}
          script: |
            const altBaseBranches = JSON.parse(core.getInput('alt-base-branches'))

            const owner = context.payload.repository.owner.login
            const repo = context.payload.repository.name
            const title = '[Auto]データ更新 ${{ steps.metadatas.outputs.current-date }}'
            const head = '${{ steps.metadatas.outputs.head-branch }}'
            const baseBranches = ['${{ steps.metadatas.outputs.base-branch }}', ...altBaseBranches]

            const { number: newPrNumber } = (await github.pulls.create({
              owner,
              repo,
              title,
              head,
              base: '${{ steps.metadatas.outputs.base-branch }}',
            })).data

            for await (branch of baseBranches) {
              await github.pulls.create({
                owner,
                repo,
                title,
                head,
                base: branch,
              })
            }

            const duplicatePullNumbers = JSON.parse(core.getInput('duplicate-pulls', { required: true }))
            duplicatePullNumbers.forEach(async pull => {
              await octokit.pulls.update({
                owner,
                repo,
                pull_number: pull,
                state: 'closed',
              })

              await octokit.issues.createComment({
                owner,
                repo,
                issue_number: pull,
                body: `Superseded by #${newPrNumber}.`,
              })
            })

